window.SIDEBAR_ITEMS = {"enum":[["Axis",""],["FromVariantError","Error type returned by `FromVariant::from_variant`."],["GodotError","Error codes used in various Godot APIs."],["Margin","Provides compatibility with Godot’s `Margin` enum through the [`TryFrom`] trait."],["VariantType",""]],"mod":[["access","Maybe unaligned pool array access"],["array",""],["dictionary",""],["geom","Geometric types."],["string",""],["variant",""]],"struct":[["Aabb","Axis-aligned bounding box."],["Basis","A 3x3 matrix, typically used as an orthogonal basis for [`Transform`][crate::core_types::Transform]."],["Color","RGBA color with 32-bit floating point components."],["Dictionary","A reference-counted `Dictionary` of `Variant` key-value pairs."],["GodotString","Godot’s reference-counted string type."],["MarginError","Error indicating that an `i64` cannot be converted to a [`Margin`]."],["NodePath","A reference-counted relative or absolute path in a scene tree, for use with `Node.get_node()` and similar functions. It can reference a node, a resource within a node, or a property of a node or resource."],["Plane","3D plane in Hessian form: `a*b + b*y + c*z + d = 0`"],["PoolArray","A reference-counted CoW typed vector using Godot’s pool allocator, generic over possible element types."],["Quat","Quaternion, used to represent 3D rotations."],["Rect2","2D axis-aligned bounding box."],["Rid","A RID (“resource ID”) is an opaque handle that refers to a Godot `Resource`."],["StringName","Interned string."],["Transform","Affine 3D transform (3x4 matrix)."],["Transform2D","Affine 2D transform (2x3 matrix)."],["Variant","A `Variant` can represent all Godot values (core types or `Object` class instances)."],["VariantArray","A reference-counted `Variant` vector. Godot’s generic array data type. Negative indices can be used to count from the right."],["Vector2","2D vector class."],["Vector3","3D vector class."]],"trait":[["CoerceFromVariant","Types that can be coerced from a `Variant`. Coercions are provided by Godot, with results consistent with GDScript. This cannot be implemented for custom types."],["FromVariant","Types that can be converted from a `Variant`. Conversions are performed in Rust, and can be implemented for custom types."],["OwnedToVariant","Types that can only be safely converted to a `Variant` as owned values. Such types cannot implement `ToVariant` in general, but can still be passed to API methods as arguments, or used as return values. Notably, this includes `Unique` arrays, dictionaries, and references to Godot objects and instances."],["PoolElement","Trait for element types that can be contained in `PoolArray`. This trait is sealed and has no public interface."],["ToVariant","Types that can be converted to a `Variant`."],["ToVariantEq","Trait for types whose `ToVariant` implementations preserve equivalence."]],"type":[["GodotResult","Result type with [GodotError]"]]};