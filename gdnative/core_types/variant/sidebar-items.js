window.SIDEBAR_ITEMS = {"enum":[["CallError",""],["FromVariantError","Error type returned by `FromVariant::from_variant`."],["VariantDispatch","Rust enum associating each primitive variant type to its value."],["VariantEnumRepr",""],["VariantOperator","Godot variant operator kind."],["VariantStructRepr",""],["VariantType",""]],"struct":[["InvalidOp","Error indicating that an operator result is invalid."],["MaybeNot","Wrapper type around a `FromVariant` result that may not be a success"],["Variant","A `Variant` can represent all Godot values (core types or `Object` class instances)."]],"trait":[["CoerceFromVariant","Types that can be coerced from a `Variant`. Coercions are provided by Godot, with results consistent with GDScript. This cannot be implemented for custom types."],["FromVariant","Types that can be converted from a `Variant`. Conversions are performed in Rust, and can be implemented for custom types."],["OwnedToVariant","Types that can only be safely converted to a `Variant` as owned values. Such types cannot implement `ToVariant` in general, but can still be passed to API methods as arguments, or used as return values. Notably, this includes `Unique` arrays, dictionaries, and references to Godot objects and instances."],["ToVariant","Types that can be converted to a `Variant`."],["ToVariantEq","Trait for types whose `ToVariant` implementations preserve equivalence."]]};